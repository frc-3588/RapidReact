// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.commands.*;

import com.revrobotics.CANSparkMaxLowLevel;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.math.controller.ProfiledPIDController;
import edu.wpi.first.math.trajectory.TrapezoidProfile;
import edu.wpi.first.wpilibj.Encoder;

import com.revrobotics.CANSparkMaxLowLevel;
import com.revrobotics.CANSparkMax;

/**
 *
 */
public class Elevator extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private static double kDt = 0.02;// test

    //belong to the entry motor
    private final Encoder m_encoder = new Encoder(1, 2);// test

    private final TrapezoidProfile.Constraints m_constraints = new TrapezoidProfile.Constraints(1.75, 0.75);// test

    private final ProfiledPIDController m_controller = new ProfiledPIDController(1.3, 0.0, 0.7, m_constraints, kDt);// test

    //belong to the exit motor
    private final Encoder m_encoder2 = new Encoder(1, 2);// test

    private final TrapezoidProfile.Constraints m_constraints2 = new TrapezoidProfile.Constraints(1.75, 0.75);// test

    private final ProfiledPIDController m_controller2 = new ProfiledPIDController(1.3, 0.0, 0.7, m_constraints, kDt);// test

    private CANSparkMax EntryMotor;
    private CANSparkMax ExitMotor;

    // the two constants below describe the individual MOTOR positions, NOT the ball's position
    public final double kRest = 0;//no movement
    public final double kToEndOfBelt = 1;
    public final double kExitBelt = 2;

    public final double kExitLevel = 0;
    public final double kMotorStopped = 0.05;// test

    private Level elevatorState;

    /**
    *
    */
    public Elevator() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        m_encoder.setDistancePerPulse(1.0 / 360.0 * 2.0 * Math.PI * 1.5);

        elevatorState = Level.START_LEVEL;

        EntryMotor = new CANSparkMax(0, MotorType.kBrushless);
        ExitMotor = new CANSparkMax(1, MotorType.kBrushless);

    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void setEntryMotorPower() {
        EntryMotor.set(m_controller.calculate(m_encoder.getDistance()));
    }

    public void setExitMotorPower() {
        ExitMotor.set(m_controller.calculate(m_encoder.getDistance()));
    }

    public double getExitMotorPower() {
        return ExitMotor.get();
    }

    public double getEntryMotorPower() {
        return EntryMotor.get();
    }

    public void setGoal() {
        //////IMPORTANT////////
        // refer to the pseudocode paper to figure out what code to type for the if
        // statements
        // an example for the second condition is provided

        // the class constants used for setting the controller goals can be found at
        // line 63
        if (elevatorState == Level.START_LEVEL) {
            //complete this section
            //motorController.
        } else if (elevatorState == Level.FIRST_LEVEL) {
            // this section is completed. use it as an example to finish the other two
            // conditions
            m_controller.setGoal(kExitBelt);//controller for the entry motor will set just enough for the ball to exit the first belt onto the second
            m_controller2.setGoal(kToEndOfBelt);//controller for the exit motor will set just enough for the ball to reach the end of the second belt
            
            elevatorState=Level.SECOND_LEVEL;//updates the elevator state to be the next level 

        } else if (elevatorState == Level.SECOND_LEVEL) {
            //complete this section
        }
    }
}
