// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.commands.*;

import com.revrobotics.CANSparkMaxLowLevel;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.wpilibj.Encoder;

import com.revrobotics.CANSparkMaxLowLevel;
import com.revrobotics.CANSparkMax;

/**
 *
 */
public class Elevator extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // to be edited, PID change
    // belong to the entry motor
    private CANSparkMax entryMotor;

    private final PIDController entryPIDController = new PIDController(1.3, 0.0, 0.7);// test
    private RelativeEncoder entryEncoder;
    // belong to the exit motor
    private CANSparkMax exitMotor;

    private final PIDController exitPIDController = new PIDController(1.3, 0.0, 0.7);// test

    private RelativeEncoder exitEncoder;

    // the two constants below describe the individual MOTOR positions, NOT the
    // ball's position
    public final double kRest = 0;// no movement
    public final double kToEndOfBelt = 1;
    public final double kExitBelt = 2;

    public final double kExitLevel = 0;
    public final double kMotorStopped = 0.05;// test

    private Level elevatorState;

    private boolean ballWantsToComeIn;

    /**
    *
    */
    public Elevator() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        elevatorState = Level.START_LEVEL;
        ballWantsToComeIn = false;

        entryMotor = new CANSparkMax(0, MotorType.kBrushless);
        exitMotor = new CANSparkMax(1, MotorType.kBrushless);

        entryEncoder = entryMotor.getEncoder();
        exitEncoder = exitMotor.getEncoder();

    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void setEntryMotorPower() {
        entryMotor.set(entryPIDController.calculate(entryEncoder.getPosition()));
    }

    public void setExitMotorPower() {
        exitMotor.set(exitPIDController.calculate(exitEncoder.getPosition()));
    }

    public double getExitMotorPower() {
        return exitMotor.get();
    }

    public double getEntryMotorPower() {
        return entryMotor.get();
    }

    public void setGoal() {
        ////// IMPORTANT////////
        // refer to the pseudocode paper to figure out what code to type for the if
        // statements
        // an example for the second condition is provided

        switch (elevatorState) {
            case START_LEVEL:
                entryPIDController.setSetpoint(kToEndOfBelt); // does k.end mean ktoendofbelt?
                exitPIDController.setSetpoint(kRest);

                elevatorState = Level.FIRST_LEVEL;
                break;

            case FIRST_LEVEL:
                entryPIDController.setSetpoint(kExitBelt);// controller for the entry motor will set just enough for the
                                                      // ball to
                // exit
                // the first belt onto the second
                exitPIDController.setSetpoint(kToEndOfBelt);// controller for the exit motor will set just enough for the
                                                         // ball
                // to
                // reach the end of the second belt

                elevatorState = Level.SECOND_LEVEL;
                break;

            case SECOND_LEVEL:
                exitPIDController.setSetpoint(kExitBelt);
                entryPIDController.setSetpoint(kRest);

                elevatorState = Level.START_LEVEL;
                break;

        }

        if (ballWantsToComeIn) {
            if (elevatorState == Level.FIRST_LEVEL) {
                entryPIDController.setSetpoint(kToEndOfBelt);
                exitPIDController.setSetpoint(kToEndOfBelt);
            } else if (elevatorState == Level.SECOND_LEVEL) {
                entryPIDController.setSetpoint(kToEndOfBelt);
            }
        }

    }

    public void setEntryMotorPowerManual(double power) {
        entryMotor.set(power);
    }

    public void setExitMotorPowerManual(double power) {
        exitMotor.set(power);
    }

    public void printCurrentPosition(){
        System.out.println("Entry Current Position: " + entryEncoder.getPosition() + " Entry Current Speed: " + entryMotor.get());
        System.out.println("Exit Current Position: " + exitEncoder.getPosition() + " Exit Current Speed: " + exitMotor.get());
    }
}
