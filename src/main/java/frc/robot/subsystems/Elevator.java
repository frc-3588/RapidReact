// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.commands.*;

import com.revrobotics.CANSparkMaxLowLevel;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.math.controller.ProfiledPIDController;
import edu.wpi.first.math.trajectory.TrapezoidProfile;
import edu.wpi.first.wpilibj.Encoder;

import com.revrobotics.CANSparkMaxLowLevel;
import com.revrobotics.CANSparkMax;

/**
 *
 */
public class Elevator extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private static double kDt = 0.02;// test

    // belong to the entry motor
    private final Encoder lowerEncoder = new Encoder(1, 2);// test

    private final TrapezoidProfile.Constraints lowerTrapezoidConstraints = new TrapezoidProfile.Constraints(1.75, 0.75);// test

    private final ProfiledPIDController lowerPIDcontroller = new ProfiledPIDController(1.3, 0.0, 0.7, lowerTrapezoidConstraints, kDt);// test

    // belong to the exit motor
    private final Encoder upperEncoder = new Encoder(1, 2);// test

    private final TrapezoidProfile.Constraints upperTrapezoidConstraints = new TrapezoidProfile.Constraints(1.75, 0.75);// test

    private final ProfiledPIDController upperPIDcontroller = new ProfiledPIDController(1.3, 0.0, 0.7, lowerTrapezoidConstraints, kDt);// test

    private CANSparkMax entryMotor;
    private CANSparkMax exitMotor;

    // the two constants below describe the individual MOTOR positions, NOT the
    // ball's position
    public final double kRest = 0;// no movement
    public final double kToEndOfBelt = 1;
    public final double kExitBelt = 2;

    public final double kExitLevel = 0;
    public final double kMotorStopped = 0.05;// test

    private Level elevatorState;

    private boolean ballWantsToComeIn;


    /**
    *
    */
    public Elevator() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        lowerEncoder.setDistancePerPulse(1.0 / 360.0 * 2.0 * Math.PI * 1.5);

        elevatorState = Level.START_LEVEL;
        ballWantsToComeIn = false; 

        entryMotor = new CANSparkMax(0, MotorType.kBrushless);
        exitMotor = new CANSparkMax(1, MotorType.kBrushless);

    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void setEntryMotorPower() {
        entryMotor.set(lowerPIDcontroller.calculate(lowerEncoder.getDistance()));
    }

    public void setExitMotorPower() {
        exitMotor.set(lowerPIDcontroller.calculate(lowerEncoder.getDistance()));
    }

    public double getExitMotorPower() {
        return exitMotor.get();
    }

    public double getEntryMotorPower() {
        return entryMotor.get();
    }

    public void setGoal() {
        ////// IMPORTANT////////
        // refer to the pseudocode paper to figure out what code to type for the if
        // statements
        // an example for the second condition is provided

        switch (elevatorState) {
            case START_LEVEL:
                lowerPIDcontroller.setGoal(kToEndOfBelt); // does k.end mean ktoendofbelt?
                upperPIDcontroller.setGoal(kRest);

                elevatorState = Level.FIRST_LEVEL;
                break;

            case FIRST_LEVEL:
                lowerPIDcontroller.setGoal(kExitBelt);// controller for the entry motor will set just enough for the ball to
                                                // exit
                // the first belt onto the second
                upperPIDcontroller.setGoal(kToEndOfBelt);// controller for the exit motor will set just enough for the ball
                                                    // to
                // reach the end of the second belt

                elevatorState = Level.SECOND_LEVEL;
                break;

            case SECOND_LEVEL:
                upperPIDcontroller.setGoal(kExitBelt);
                lowerPIDcontroller.setGoal(kRest);

                elevatorState = Level.START_LEVEL;
                break;

        }

        if(ballWantsToComeIn){
            if(elevatorState==Level.FIRST_LEVEL){
                lowerPIDcontroller.setGoal(kToEndOfBelt);
                upperPIDcontroller.setGoal(kToEndOfBelt);
            }
            else if(elevatorState==Level.SECOND_LEVEL){
                lowerPIDcontroller.setGoal(kToEndOfBelt);
            }
        }
    
    }

    public void setEntryMotorPowerManual(){
        entryMotor.set(0.5);
    }

    public void setExitMotorPowerManual(){
        exitMotor.set(.5);
    }
}
