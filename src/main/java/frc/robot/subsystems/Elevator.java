// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.commands.*;

import com.revrobotics.CANSparkMaxLowLevel;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.wpilibj.Encoder;

import com.revrobotics.CANSparkMaxLowLevel;
import com.revrobotics.CANSparkMax;

//comment out below if too bulky
import com.revrobotics.RelativeEncoder;
import com.revrobotics.SparkMaxRelativeEncoder;

/**
 *
 */
public class Elevator extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // the two constants below describe the individual MOTOR positions, NOT the
    // ball's position

    // belong to the entry motor
    private CANSparkMax lowerMotor;

    // belong to the exit motor
    private CANSparkMax upperMotor;

    // used for encoders for both motors (If interferes with normal code, comment
    // out)
    public RelativeEncoder lowerEncoder, upperEncoder;
    public PIDController lowerController, upperController;

    // Variables for PID
    private final double kp = 0.01;
    private final double ki = 0.0;
    private final double kd = 0.0;

    /**
    *
    */
    public Elevator() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        lowerMotor = new CANSparkMax(8, MotorType.kBrushless);
        lowerMotor.setInverted(true);
        upperMotor = new CANSparkMax(2, MotorType.kBrushless);
        upperMotor.setInverted(false);

        // ensures sparks start at default config every time the robot is on, must be
        // declared after constructors
        lowerMotor.restoreFactoryDefaults();
        upperMotor.restoreFactoryDefaults();

        lowerEncoder = lowerMotor.getEncoder();
        lowerEncoder.setPosition(0.0);
        upperEncoder = upperMotor.getEncoder();
        upperEncoder.setPosition(0.0);

        lowerController = new PIDController(kp, ki, kd);
        upperController = new PIDController(kp, ki, kd);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        // periodically updates the positioning of the robot
        // if interfering with normal code, comment out
        // lowerMotor.set(lowerController.calculate(lowerEncoder.getPosition()));
        // upperMotor.set(upperController.calculate(upperEncoder.getPosition()));

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void setEntryMotorPowerManual(double power) {
        lowerMotor.set(power);
    }

    public void setExitMotorPowerManual(double power) {
        upperMotor.set(power);
    }

    public void setLowerMotorPos(double positionGoal) {
        lowerController.setSetpoint(positionGoal);
        lowerMotor.set(lowerController.calculate(lowerEncoder.getPosition()));
    }

    public void setUpperMotorPos(double positionGoal) {
        upperController.setSetpoint(positionGoal);
        upperMotor.set(upperController.calculate(upperEncoder.getPosition()));
    }

    public boolean lowerMotorAtPosGoal() {
        return lowerController.atSetpoint();
    }

    public boolean upperMotorAtPosGoal() {
        return upperController.atSetpoint();
    }

}
