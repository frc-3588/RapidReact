// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj2.command.CommandBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.Chassis;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.Acquisition;
import frc.robot.subsystems.Elevator;

/**
 *
 */
public class AutonomousCommand extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final Chassis m_chassis;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private Timer auto_time;
    private double reverseMotorPower = -0.4;
    private double motorPower = 0.0;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public AutonomousCommand(Chassis subsystem) {


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_chassis = subsystem;
        addRequirements(m_chassis);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        // aren's auto code, resets timer first then starts the timer
        auto_time.reset();
        auto_time.start();
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        // aren's auto code, sets power so robot reverses
        m_chassis.setTankPower(reverseMotorPower, reverseMotorPower);

        // marc's auto code
        // m_elevator.setUpperMotorPos(-75);
        // m_elevator.setLowerMotorPos(-75);

        // m_chassis.waitSeconds(5.0);

        // m_elevator.setUpperMotorPos(25);
        // m_elevator.setLowerMotorPos(25);
        // m_chassis.setRightFrontMotorPos(-30);
        // m_chassis.setLeftFrontMotorPos(-30);
        // m_chassis.setRightRearMotorPos(-30);
        // m_chassis.setLeftRearMotorPos(-30);
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        // aren's auto code, once x amount of seconds has passed, stops drive
        m_chassis.setTankPower(motorPower, motorPower);
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        // aren's auto code, checks if x amount of seconds passed
        return auto_time.hasElapsed(4);
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
